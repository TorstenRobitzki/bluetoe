#include <bluetoe/bindings/nrf51.hpp>
#include <cassert>
#include <algorithm>

struct radio_t : bluetoe::nrf51_details::scheduled_radio_factory<
            bluetoe::nrf51_details::scheduled_radio_base_with_encryption<>
        >::template scheduled_radio< 100, 100, radio_t >
{
    void adv_received( const bluetoe::link_layer::read_buffer& )
    {
    }

    bool is_scan_request_in_filter( const bluetoe::link_layer::device_address& ) const
    {
        return true;
    }
};

static bool c1_test()
{
    const bluetoe::details::uint128_t p1{{
        0x01, 0x00, 0x01, 0x01,
        0x00, 0x00, 0x10, 0x07,
        0x07, 0x02, 0x03, 0x00,
        0x00, 0x08, 0x00, 0x05
    }};

    const bluetoe::details::uint128_t p2{{
        0xB6, 0xB5, 0xB4, 0xB3,
        0xB2, 0xB1, 0xA6, 0xA5,
        0xA4, 0xA3, 0xA2, 0xA1,
        0x00, 0x00, 0x00, 0x00
    }};

    const bluetoe::details::uint128_t k{{
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00
    }};

    const bluetoe::details::uint128_t r{{
        0xE0, 0x2E, 0x70, 0xC6,
        0x4E, 0x27, 0x88, 0x63,
        0x0E, 0x6F, 0xAD, 0x56,
        0x21, 0xD5, 0x83, 0x57
    }};

    const bluetoe::details::uint128_t expected{{
        0x86, 0x3b, 0xf1, 0xbe,
        0xc5, 0x4d, 0xa7, 0xd2,
        0xea, 0x88, 0x89, 0x87,
        0xef, 0x3f, 0x1e, 0x1e
    }};

    radio_t radio;
    const bluetoe::details::uint128_t confirm = radio.c1( k, r, p1, p2 );

    return std::distance( confirm.begin(), confirm.end() ) == std::distance( expected.begin(), expected.end() )
        && std::equal( confirm.begin(), confirm.end(), expected.begin() );
}

static bool c1_test()
{
    // For example, if the 128-bit k is 0x00000000000000000000000000000000,
    // the 128-bit value r is 0x5783D52156AD6F0E6388274EC6702EE0, the 128-bit
    // value p1 is 0x05000800000302070710000001010001 and the 128-bit value
    // p2 is 0x00000000A1A2A3A4A5A6B1B2B3B4B5B6 then the 128-bit output from
    // the c1 function is 0x1e1e3fef878988ead2a74dc5bef13b86.

    const bluetoe::details::uint128_t p1{{
        0x05, 0x00, 0x08, 0x00, 0x00, 0x03, 0x02, 0x07,
        0x07, 0x10, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01
    }};

    const bluetoe::details::uint128_t p2{{
        0x00, 0x00, 0x00, 0x00, 0xA1, 0xA2, 0xA3, 0xA4,
        0xA5, 0xA6, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6
    }};

    const bluetoe::details::uint128_t k{{
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    }};

    const bluetoe::details::uint128_t r{{
        0x57, 0x83, 0xD5, 0x21, 0x56, 0xAD, 0x6F, 0x0E,
        0x63, 0x88, 0x27, 0x4E, 0xC6, 0x70, 0x2E, 0xE0
    }};

    const bluetoe::details::uint128_t expected{{
        0x1e, 0x1e, 0x3f, 0xef, 0x87, 0x89, 0x88, 0xea,
        0xd2, 0xa7, 0x4d, 0xc5, 0xbe, 0xf1, 0x3b, 0x86
    }};

    radio_t radio;
    const bluetoe::details::uint128_t confirm = radio.c1( k, r, p1, p2 );

    return std::distance( confirm.begin(), confirm.end() ) == std::distance( expected.begin(), expected.end() )
        && std::equal( confirm.begin(), confirm.end(), expected.begin() );
}

static bool s1_test()
{
    static const bluetoe::details::uint128_t k = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };

    // r1 = 0x000F0E0D0C0B0A091122334455667788
    static const bluetoe::details::uint128_t r1 = {
        0x00, 0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09,
        0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88
    };

    // r2 = 0x010203040506070899AABBCCDDEEFF00
    static const bluetoe::details::uint128_t r2 = {
        0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
        0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF, 0x00
    };

    // 0x9a1fe1f0e8b0f49b5b4216ae796da062
    static const bluetoe::details::uint128_t expected = {
        0x9a, 0x1f, 0xe1, 0xf0, 0xe8, 0xb0, 0xf4, 0x9b,
        0x5b, 0x42, 0x16, 0xae, 0x79, 0x6d, 0xa0, 0x62
    };

    radio_t radio;

    const bluetoe::details::uint128_t key = radio.s1( k, r1, r2 );

    return std::distance( key.begin(), key.end() ) == std::distance( expected.begin(), expected.end() )
        && std::equal( key.begin(), key.end(), expected.begin() );
}

int main()
{
    assert( c1_test() );
    assert( s1_test() );

    for ( ; ; )
        ;
}
