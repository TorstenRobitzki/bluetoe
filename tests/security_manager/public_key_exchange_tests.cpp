#define BOOST_TEST_MODULE
#include <boost/test/included/unit_test.hpp>

#include <bluetoe/security_manager.hpp>

#include "test_sm.hpp"

BOOST_AUTO_TEST_SUITE( pairing_public_key_exchange )

    BOOST_AUTO_TEST_CASE_TEMPLATE( request_too_small, Manager, test::lesc_managers )
    {
        test::lesc_pairing_features_exchanged< Manager > fixture;

        fixture.expected(
            {
                0x0C,           // Pairing Public Key
                // Public Key X
                0xe6, 0x9d, 0x35, 0x0e,
                0x48, 0x01, 0x03, 0xcc,
                0xdb, 0xfd, 0xf4, 0xac,
                0x11, 0x91, 0xf4, 0xef,
                0xb9, 0xa5, 0xf9, 0xe9,
                0xa7, 0x83, 0x2c, 0x5e,
                0x2c, 0xbe, 0x97, 0xf2,
                0xd2, 0x03, 0xb0, 0x20,
                // Public Key Y
                0x8b, 0xd2, 0x89, 0x15,
                0xd0, 0x8e, 0x1c, 0x74,
                0x24, 0x30, 0xed, 0x8f,
                0xc2, 0x45, 0x63, 0x76,
                0x5c, 0x15, 0x52, 0x5a,
                0xbf, 0x9a, 0x32, 0x63,
                0x6d, 0xeb, 0x2a, 0x65,
                0x49, 0x9c, 0x80
            },
            {
                0x05,           // Pairing Failed
                0x0A,           // Invalid Parameters
            }
        );
    }


    BOOST_AUTO_TEST_CASE_TEMPLATE( request_too_large, Manager, test::lesc_managers )
    {
        test::lesc_pairing_features_exchanged< Manager > fixture;

        fixture.expected(
            {
                0x0C,           // Pairing Public Key
                // Public Key X
                0xe6, 0x9d, 0x35, 0x0e,
                0x48, 0x01, 0x03, 0xcc,
                0xdb, 0xfd, 0xf4, 0xac,
                0x11, 0x91, 0xf4, 0xef,
                0xb9, 0xa5, 0xf9, 0xe9,
                0xa7, 0x83, 0x2c, 0x5e,
                0x2c, 0xbe, 0x97, 0xf2,
                0xd2, 0x03, 0xb0, 0x20,
                // Public Key Y
                0x8b, 0xd2, 0x89, 0x15,
                0xd0, 0x8e, 0x1c, 0x74,
                0x24, 0x30, 0xed, 0x8f,
                0xc2, 0x45, 0x63, 0x76,
                0x5c, 0x15, 0x52, 0x5a,
                0xbf, 0x9a, 0x32, 0x63,
                0x6d, 0xeb, 0x2a, 0x65,
                0x49, 0x9c, 0x80, 0xdc,
                0x00                    // extra byte
            },
            {
                0x05,           // Pairing Failed
                0x0A,           // Invalid Parameters
            }
        );
    }

    BOOST_AUTO_TEST_CASE_TEMPLATE( key_not_on_valid_curve, Manager, test::lesc_managers )
    {
        test::lesc_pairing_features_exchanged< Manager > fixture;

        fixture.expected(
            {
                0x0C,           // Pairing Public Key
                // Public Key X
                0xe6, 0x9d, 0x35, 0x0e,
                0x48, 0x01, 0x03, 0xcc,
                0xdb, 0xfd, 0xf4, 0xac,
                0x11, 0x91, 0xf4, 0xef,
                0xb9, 0xa5, 0xf9, 0xe9,
                0xa7, 0x83, 0x2c, 0x5e,
                0x2c, 0xbe, 0x97, 0xf2,
                0xd2, 0x03, 0xb0, 0x20,
                // Public Key Y
                0x8b, 0xd2, 0x89, 0x15,
                0xd0, 0x8e, 0x1c, 0x74,
                0x24, 0x30, 0xed, 0x8f,
                0xc2, 0x45, 0x63, 0x76,
                0x5c, 0x15, 0x52, 0x5a,
                0xbf, 0x9a, 0x32, 0x63,
                0x6d, 0xeb, 0x2a, 0x65,
                0x49, 0x9c, 0x80, 0x80  // <-- last nibble changed
            },
            {
                0x05,           // Pairing Failed
                0x0A,           // Invalid Parameters
            }
        );
    }

    BOOST_AUTO_TEST_CASE_TEMPLATE( valid_key, Manager, test::lesc_managers )
    {
        test::lesc_pairing_features_exchanged< Manager > fixture;

        fixture.expected(
            {
                0x0C,                   // Pairing Public Key
                // Public Key X
                0xe6, 0x9d, 0x35, 0x0e,
                0x48, 0x01, 0x03, 0xcc,
                0xdb, 0xfd, 0xf4, 0xac,
                0x11, 0x91, 0xf4, 0xef,
                0xb9, 0xa5, 0xf9, 0xe9,
                0xa7, 0x83, 0x2c, 0x5e,
                0x2c, 0xbe, 0x97, 0xf2,
                0xd2, 0x03, 0xb0, 0x20,
                // Public Key Y
                0x8b, 0xd2, 0x89, 0x15,
                0xd0, 0x8e, 0x1c, 0x74,
                0x24, 0x30, 0xed, 0x8f,
                0xc2, 0x45, 0x63, 0x76,
                0x5c, 0x15, 0x52, 0x5a,
                0xbf, 0x9a, 0x32, 0x63,
                0x6d, 0xeb, 0x2a, 0x65,
                0x49, 0x9c, 0x80, 0xdc
            },
            {
                0x0C,                   // Pairing Public Key
                // Public Key X
                0x90, 0xa1, 0xaa, 0x2f,
                0xb2, 0x77, 0x90, 0x55,
                0x9f, 0xa6, 0x15, 0x86,
                0xfd, 0x8a, 0xb5, 0x47,
                0x00, 0x4c, 0x9e, 0xf1,
                0x84, 0x22, 0x59, 0x09,
                0x96, 0x1d, 0xaf, 0x1f,
                0xf0, 0xf0, 0xa1, 0x1e,
                // Public Key Y
                0x4a, 0x21, 0xb1, 0x15,
                0xf9, 0xaf, 0x89, 0x5f,
                0x76, 0x36, 0x8e, 0xe2,
                0x30, 0x11, 0x2d, 0x47,
                0x60, 0x51, 0xb8, 0x9a,
                0x3a, 0x70, 0x56, 0x73,
                0x37, 0xad, 0x9d, 0x42,
                0x3e, 0xf3, 0x55, 0x4c,
            }
        );
    }

BOOST_AUTO_TEST_SUITE_END()

BOOST_AUTO_TEST_CASE_TEMPLATE( not_expected_key_exchanged, Manager, test::lesc_managers )
{
    test::security_manager_base< Manager, test::all_security_functions, 65 > fixture;

    fixture.expected(
        {
            0x0C,                   // Pairing Public Key
            // Public Key X
            0xe6, 0x9d, 0x35, 0x0e,
            0x48, 0x01, 0x03, 0xcc,
            0xdb, 0xfd, 0xf4, 0xac,
            0x11, 0x91, 0xf4, 0xef,
            0xb9, 0xa5, 0xf9, 0xe9,
            0xa7, 0x83, 0x2c, 0x5e,
            0x2c, 0xbe, 0x97, 0xf2,
            0xd2, 0x03, 0xb0, 0x20,
            // Public Key Y
            0x8b, 0xd2, 0x89, 0x15,
            0xd0, 0x8e, 0x1c, 0x74,
            0x24, 0x30, 0xed, 0x8f,
            0xc2, 0x45, 0x63, 0x76,
            0x5c, 0x15, 0x52, 0x5a,
            0xbf, 0x9a, 0x32, 0x63,
            0x6d, 0xeb, 0x2a, 0x65,
            0x49, 0x9c, 0x80, 0xdc
        },
        {
            0x05,           // Pairing Failed
            0x08,           // Unspecified Reason
        }
    );
}
